<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-13T15:35:59-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Devin Venable Code Stuff</title><subtitle>Yet-Another-Blog</subtitle><entry><title type="html">Strange Stacks</title><link href="http://localhost:4000/2020/01/28/strange-stacks.html" rel="alternate" type="text/html" title="Strange Stacks" /><published>2020-01-28T21:45:13-06:00</published><updated>2020-01-28T21:45:13-06:00</updated><id>http://localhost:4000/2020/01/28/strange-stacks</id><content type="html" xml:base="http://localhost:4000/2020/01/28/strange-stacks.html">&lt;p&gt;
    In my work I often encounter legacy websites that were built well over a decade ago. 
    As I review the source, I can see that developers came and went, and some efforts were made 
    each year to modernize the codebase.
&lt;/p&gt;
&lt;p&gt;Unfortunately, generations of changes are grafted onto the same structure. This sometimes leads to a very 
    Frankenstien-like code beast. 
&lt;/p&gt;
&lt;p&gt;I'm guilty of building the same. For years I built full-stack web applications using Django, and as 
    trends evolved, the libraries I used to support the HTML, CSS, and JS I wrote changed over time.
&lt;/p&gt;
&lt;p&gt;Django uses server-side templates, which are rendered by the server. Though Django templating syntax is more like Handlebars
    or Mustache.js, django followed in a long tradition of server-side templating. CGI and Perl scripts, PHP and ASPs 
    were the granddaddies, and JAVA introduced Servletts and ASP-cloned JSPs and many others over time.
&lt;/p&gt;
&lt;p&gt;In the 2010's client-side rendering grew in popularity and eventually took over. Javascript in the early 2000's
    was not standardized as each browser had its own implementation. Glue libraries like JQuery 
    provided an abstraction layer that made JS code more portable.
&lt;/p&gt;
&lt;p&gt;AngularJS made a major splash in October, 2010, and server-side developers looked for ways to integrate it into 
    their existing frameworks. Some split template-rendering into client frameworks that communicated with their
    servers via Restful APIs. Others build server-side toolchains that compiled AngularJS into static assets to served
    by their backends.
&lt;/p&gt;
&lt;p&gt;Angular 2 was a big departure from Angular 1, giving some teams pause to consider other frameworks like React and Vue.
Some teams started migrating from Angular 1, never to completely abandon it.
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;todo...&lt;/h2&gt;</content><author><name></name></author><summary type="html">In my work I often encounter legacy websites that were built well over a decade ago. As I review the source, I can see that developers came and went, and some efforts were made each year to modernize the codebase. Unfortunately, generations of changes are grafted onto the same structure. This sometimes leads to a very Frankenstien-like code beast. I'm guilty of building the same. For years I built full-stack web applications using Django, and as trends evolved, the libraries I used to support the HTML, CSS, and JS I wrote changed over time. Django uses server-side templates, which are rendered by the server. Though Django templating syntax is more like Handlebars or Mustache.js, django followed in a long tradition of server-side templating. CGI and Perl scripts, PHP and ASPs were the granddaddies, and JAVA introduced Servletts and ASP-cloned JSPs and many others over time. In the 2010's client-side rendering grew in popularity and eventually took over. Javascript in the early 2000's was not standardized as each browser had its own implementation. Glue libraries like JQuery provided an abstraction layer that made JS code more portable. AngularJS made a major splash in October, 2010, and server-side developers looked for ways to integrate it into their existing frameworks. Some split template-rendering into client frameworks that communicated with their servers via Restful APIs. Others build server-side toolchains that compiled AngularJS into static assets to served by their backends. Angular 2 was a big departure from Angular 1, giving some teams pause to consider other frameworks like React and Vue. Some teams started migrating from Angular 1, never to completely abandon it.</summary></entry></feed>