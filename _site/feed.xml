<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-14T12:09:26-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Devin Venable Code Stuff</title><subtitle>Yet-Another-Blog</subtitle><entry><title type="html">Evolving Stacks</title><link href="http://localhost:4000/2020/01/28/strange-stacks.html" rel="alternate" type="text/html" title="Evolving Stacks" /><published>2020-01-28T21:45:13-06:00</published><updated>2020-01-28T21:45:13-06:00</updated><id>http://localhost:4000/2020/01/28/strange-stacks</id><content type="html" xml:base="http://localhost:4000/2020/01/28/strange-stacks.html">&lt;p&gt;In my work I often encounter legacy websites that were built well over a decade ago. 
As I review the source, I see the developers made efforts 
each year to modernize the codebase.&lt;/p&gt;

&lt;p&gt;Unfortunately, generations of changes are grafted onto the same structure. This sometimes leads to a very 
Frankenstien-like code beast. 
I’m guilty of building the same. For years I built full-stack web applications using Django, and as 
trends evolved, the libraries I used to support the HTML, CSS, and JS I wrote changed over time.&lt;/p&gt;

&lt;p&gt;Django uses &lt;strong&gt;server-side&lt;/strong&gt; templates, which are rendered by the server. Though Django templating syntax is more like Handlebars
or Mustache.js, django followed in a long tradition of &lt;strong&gt;server-side&lt;/strong&gt; templating. Remember CGI and Perl scripts? These, along with other granddaddies like PHP or ASPs or JSPs dynamically munged HTML/CSS with data on the server side, and sent to web browsers as fully rendered HTML files.&lt;/p&gt;

&lt;p&gt;In the 2010’s client-side rendering grew in popularity and eventually took over. Javascript in the early 2000’s
was not standardized as each browser had its own implementation. Glue libraries like JQuery 
provided an abstraction layer that made JS code more portable.&lt;/p&gt;

&lt;p&gt;AngularJS made a major splash in October, 2010, and server-side developers looked for ways to integrate it into 
their existing frameworks. Some split template-rendering into client frameworks that communicated with their
servers via Restful APIs. Others build server-side toolchains that compiled AngularJS into static assets to served
by their backends.&lt;/p&gt;

&lt;p&gt;Angular 2 was a big departure from Angular 1, giving some teams pause to consider other frameworks like React and Vue.
Some teams started migrating from Angular 1, never to completely abandon it.&lt;/p&gt;

&lt;h2 id=&quot;groovy-on-grails&quot;&gt;Groovy on Grails&lt;/h2&gt;

&lt;p&gt;I’ve been looking at code that was written in Groovy on Grails, the Ruby on Rails inspired JAVA-based web framework.&lt;/p&gt;

&lt;p&gt;Over time a number of technologies were employed, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java 8 (the language)&lt;/li&gt;
  &lt;li&gt;Tomcat 8 (the webserver)&lt;/li&gt;
  &lt;li&gt;MySQL (the database)&lt;/li&gt;
  &lt;li&gt;GSP (Groovy Server Pages)&lt;/li&gt;
  &lt;li&gt;Gradle (build tool)&lt;/li&gt;
  &lt;li&gt;bower (javascript package manager)&lt;/li&gt;
  &lt;li&gt;ElasticSearch ( indexing / search )&lt;/li&gt;
  &lt;li&gt;Docker ( container with everything preconfigured for use )&lt;/li&gt;
  &lt;li&gt;Angular 1 ( web framework -&amp;gt; compiled to server static assets )&lt;/li&gt;
  &lt;li&gt;Coffeescript ( little language that compiles to javascript )&lt;/li&gt;
  &lt;li&gt;Asset Pipeline ( framework for minifying static assets, compiling coffeescript to js )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue I was brought on to troubleshoot was related to Angular compile errors that had cropped up after working to upgrade to Grails 5.&lt;/p&gt;

&lt;p&gt;This error in question was in the form “XXX is not using explicit annotation and cannot be invoked in strict mode”.&lt;/p&gt;

&lt;p&gt;The solution was to declare all dependency injections in string array. Any code like this…&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my.forms.actions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my.ui.actions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etcProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ngInject&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…must be updated like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my.forms.actions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my.ui.actions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;etcProvider&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etcProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ngInject&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same error appeared in several coffeescript files. It was trickier 
to find the equivelant fix using coffeescript so I opted to 
&lt;a href=&quot;https://decaffeinate-project.org/&quot;&gt;decafinate&lt;/a&gt; the script into standard es6 JS.&lt;/p&gt;

&lt;p&gt;Dozens if not hundreds of similar fixes were needed, but why? Why now? Apparently in previous iterations of the code, the Angular source was not in &lt;a href=&quot;https://www.youtube.com/watch?v=QkC1hjXx0dU&quot;&gt;STRICT&lt;/a&gt;  mode.&lt;/p&gt;

&lt;p&gt;It turns out that a GSP file had been introduced a few weeks prior containing a &lt;strong&gt;ng-strict-di&lt;/strong&gt; tag. Removing the tag removed the strict mode compilation errors.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demoCurator&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demoCurator&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-strict-di&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a case like this, if sticking with Angular 1, it might be beneficial to embrace strict mode to help future developers avoid syntax mistakes. But the project owner wisely decided not to invest the time, as they’re planning to move all of the Angular and Coffeescript code to React soon.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;The initial build errors told us exactly where to look for the problem but not how to fix it. We could have spent days refactoring code to rid the source of this error.&lt;/p&gt;

&lt;p&gt;Niche or boutique programming languages don’t always have a long shelf life. While researching solutions, all proposed solutions and examples were written in Javascript, which meant additional time was needed to translate the solutions to coffeescript. Coffeescript seemed a viable language a few years ago, and some developers found it less cumbersome than standards-based JS. It was good for them. But was it good for those who follow long after the alternative language has faded? How much quality documentation will be written in an aging syntax?&lt;/p&gt;

&lt;p&gt;The build chain and package management was a mix of JAVA-related technologies and JS-related technologies, which is necessary if your stack is built on both languages. But it would be useful to do a 50,000 foot analysis and ask, “Is there an less verbose, less complex, easier-to-maintain way to provide this same functionality in 2022?”&lt;/p&gt;</content><author><name></name></author><summary type="html">In my work I often encounter legacy websites that were built well over a decade ago. As I review the source, I see the developers made efforts each year to modernize the codebase.</summary></entry><entry><title type="html">Thinking about Scope in Javascript</title><link href="http://localhost:4000/2020/01/28/thinking-scope.html" rel="alternate" type="text/html" title="Thinking about Scope in Javascript" /><published>2020-01-28T21:45:13-06:00</published><updated>2020-01-28T21:45:13-06:00</updated><id>http://localhost:4000/2020/01/28/thinking-scope</id><content type="html" xml:base="http://localhost:4000/2020/01/28/thinking-scope.html">&lt;h2 id=&quot;understanding-execution-context&quot;&gt;Understanding Execution Context&lt;/h2&gt;

&lt;p&gt;The rules of scope in JavaScript may seem confusing compared to other languages like JAVA or C++, but easier to understand if you consider Execution Context (EC), or the environment in which JavaScript code is evaluated and executed.&lt;/p&gt;

&lt;p&gt;The EC can be visualized as a Node. Imagine the node as a block with a Memory and a Code section. It might be visualized like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ec.png&quot; alt=&quot;EC Node 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Javascript runtimes uses a &lt;strong&gt;call stack&lt;/strong&gt; to manage ECs. A call stack behaves as a LIFO queue, meaning last-in-first-out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript is a synchronous language&lt;/strong&gt;, meaning that only one EC is running at a time. This may seem confusing since JavaScript has blocking methods like &lt;strong&gt;await&lt;/strong&gt;, but we’ll come back to that topic in a later post.&lt;/p&gt;

&lt;p&gt;When you start a JavaScript program, the engine creates a &lt;strong&gt;Global Execution Context&lt;/strong&gt;, which is pushed onto the stack.&lt;/p&gt;

&lt;p&gt;When a function is encountered, the engine creates a new &lt;strong&gt;Execution Context&lt;/strong&gt; for the function and pushes it onto the stack and starts its execution.&lt;/p&gt;

&lt;p&gt;When the current function completes, the JavaScript engine pops it off the call stack and resumes the execution where it left off.&lt;/p&gt;

&lt;p&gt;The script stops once the call stack is empty.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.javascripttutorial.net/javascript-call-stack/&quot;&gt;https://www.javascripttutorial.net/javascript-call-stack/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is a visual example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/call-stack.png&quot; alt=&quot;Call Stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At any given time, the runtime environment (the browser or node if running on a server) is executing a single EC. Certain variables are visible to the EC’s function, and some external variables, which may exist in the local scope of other ECs are also visible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Interestingly, an EC’s running function may have access to a variable defined in another function that was, at one time, pushed onto the call stack and has since been popped. More on this when we discuss Closure.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Consider this contrived example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Again, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
   &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because z is not defined until the function world, it is not in scope for function hello. If you run this, you will receive a reference error: z is not defined.
Let’s build our visual representations of the Execution Contexts for the example above.&lt;/p&gt;

&lt;p&gt;First the Global Execution context is built. It would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/global-ec-1.png&quot; alt=&quot;Global EC 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the interpreter encounters the function world, it will create a second execution context.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ec-2.png&quot; alt=&quot;EC 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember: an Execution Context has access to its memory, plus the memory of its parent, or the function that called it. So it has &lt;strong&gt;lexical scope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the first block, when the code console.log(x,y,z) is reached, there is no way to access a variable z, as its EC has no conception as to whether z exists.&lt;/p&gt;

&lt;p&gt;However the second block can see z, because it is in its local EC, and x and y, because they are in the parent’s context. Think about this for a minute and make sure you understand why.&lt;/p&gt;

&lt;p&gt;Let’s try again, removing our reference to z in hello, and adding a call to the child function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Again, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
   &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childFun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;childFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output: Again, Hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// output: Again, Hello world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;x is visible in global scope, hello scope and world scope&lt;/li&gt;
  &lt;li&gt;y is visible in hello scope and world scope&lt;/li&gt;
  &lt;li&gt;z is visible in world scope only&lt;/li&gt;
  &lt;li&gt;x and y were not passed explicitly as arguments to their child functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One way to think about EC is to consider it a function with access to its own local variables and a pointer to the variables defined within its parent’s function.  Each EC has a pointer to its parents’ memory, so it’s much like a &lt;strong&gt;linked list&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To recap, conceptually:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Execution Context a dual-purpose Node.&lt;/li&gt;
  &lt;li&gt;This is a node that can be pushed onto a stack, executed, then popped off the stack.&lt;/li&gt;
  &lt;li&gt;At the same time, each node’s memory is linked to its parent, forming a linked list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Generally speaking, variables that are &lt;strong&gt;defined locally&lt;/strong&gt;, or within a function, are &lt;strong&gt;always accessible&lt;/strong&gt; within the function’s EC.&lt;/p&gt;

&lt;p&gt;Variables that were &lt;strong&gt;defined in the calling function are also available&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In our example, while executing World’s Execution Context, the interpreter would look for the variables x and y in local memory, and when not found, will look to the parent context, and if not there, its parent context, all the way back up to the root node.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This is a conceptual description of how a browser operates a call stack and actual implementation details will differ.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stated differently, &lt;strong&gt;scopes are nested&lt;/strong&gt;. When you see the phrase &lt;strong&gt;Lexical Scope&lt;/strong&gt; remember that it means local scopes plus parent scopes.&lt;/p&gt;

&lt;h2 id=&quot;scopes&quot;&gt;Scopes&lt;/h2&gt;

&lt;p&gt;I hope that the proceeding explanation provided insight into how scope is handled fundamentally in Execution Contexts.&lt;/p&gt;

&lt;p&gt;But JavaScript is a language with a long history and there are other special rules, some fundamental and some syntactical. I’ll summarize here.&lt;/p&gt;

&lt;h3 id=&quot;block-scope&quot;&gt;Block Scope&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Any variable defined within a code block using the keywords let or const has block scope.&lt;/li&gt;
  &lt;li&gt;Any variable defined with the keyword var within a block has global scope  unless defined within a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function-scope&quot;&gt;Function Scope&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Any variable defined within a function using var, let or const will have function scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;module-scope&quot;&gt;Module Scope&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Any variable, function or classes defined within a module are not visible outside the module unless the export keyword is used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nested-scope&quot;&gt;Nested Scope&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A scope within another scope is called inner scope.&lt;/li&gt;
  &lt;li&gt;The wrapping scope is known as outer scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;global-scope&quot;&gt;Global Scope&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Top level variables are global.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lexical-scope&quot;&gt;Lexical Scope&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Variables are accessible based upon their position with the nested function scopes.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Understanding Execution Context</summary></entry></feed>